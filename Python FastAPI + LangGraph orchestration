## Automated Lead Qualification Workflow (LangGraph Version)

This folder contains the *LangGraph-based multi-agent workflow for automated lead qualification with HubSpot and VAPI integration.  
It is the extended version of the original n8n workflow, now with Python FastAPI + LangGraph orchestration.

---

## Use Case

The system automates how new leads are handled once they enter HubSpot.
	1.	Lead created in HubSpot
	    •	Whenever a new contact is added in HubSpot (status = NEW), a workflow is triggered.
	2.	Automated outbound call via VAPI
	    •	The system places a call to the lead using VAPI.
	    •	The conversation is handled by a virtual agent that can ask qualification questions (budget, authority, need, timeline, etc.).
	3.	Call outcome analysis
	    •	At the end of the call, VAPI sends a call report (summary + transcript + structured data).
	    •	The system classifies the lead as Qualified, Unqualified, or Other based on the conversation.
	4.	Human vs. VM distinction
	    •	If the call connects with a human, the transcript and analysis reflect that (answers captured, reasoning logged).
	    •	If it only hits a voicemail or there’s no response, the workflow notes that and updates HubSpot accordingly (e.g., “Attempted to Contact” or “No connect”).
	5.	Update HubSpot automatically
	    •	The system updates the lead status (e.g., Qualified → Open Deal, Unqualified, Attempted Contact).
	    •	It also logs a call engagement inside the contact’s HubSpot record, including a professional call summary generated from the transcript.

---

## Overview

This version replaces the no-code n8n workflow with a **LangGraph-powered agent system** that handles:

1. HubSpot webhook listener  
   - Captures new contacts (`contact.creation` events).  
   - Fetches contact details (phone, status, etc).  

2. LangGraph workflow  
   - Multi-node pipeline: process contact → initiate VAPI call → analyze → update HubSpot.  
   - Supports call result analysis with OpenAI (optional) or fallback heuristics.  

3. VAPI webhook listener  
   - Receives `end-of-call-report`.  
   - Extracts transcript + analysis.  
   - Logs call engagement in HubSpot + updates lead status and contact summary.  

---

## Pre-requisites

Before setting up this workflow, ensure you have:

1. **HubSpot Developer App**  
   - A HubSpot developer account with a private app created.  
   - The app must have `crm.objects.contacts.read/write` and `crm.objects.companies.read` scopes enabled.  
   - Client ID, Client Secret, and Refresh Token from HubSpot.  

2. **VAPI Account**  
   - Access to [Vapi.ai](https://vapi.ai) with an active workflow created.  
   - Your `VAPI_API_KEY` and `VAPI_WORKFLOW_ID`.  

3. **Ngrok (or any tunneling service)**  
   - To expose your local FastAPI server to the internet for HubSpot and VAPI webhooks.  

4. **Python 3.11+**  
   - Installed locally with `pip` available to install dependencies.  

5. **OpenAI API Key (or any other llm)**  
   - Required for LLM-powered call transcript analysis and VM analysis.  

---

## Files

- `hubspot_vapi_agent.py` → Contains all business logic (LangGraph nodes, HubSpot API helpers, VAPI helpers).  
- `webhook_server.py` → FastAPI server with `/webhook/hubspot` and `/webhook/vapi` endpoints.  
- `.env.example` → Example environment variables needed for the integration.  

---

## Setup Instructions

1. Clone the repository
   git clone https://github.com/baneo-ai/automated-lead-qualification-workflow-with-HubSpot-Integration.git
   cd automated-lead-qualification-workflow-with-HubSpot-Integration/langgraph-version

2. Create & activate a virtual environment
   python3 -m venv venv
   source venv/bin/activate

3. Install dependencies
   pip install -r requirements.txt

4. Copy .env.example → .env and fill in:
	  •	HUBSPOT_CLIENT_ID
	  •	HUBSPOT_CLIENT_SECRET
	  •	HUBSPOT_REFRESH_TOKEN
	  •	OPENAI_API_KEY (optional, for LLM call analysis)
	  •	VAPI_API_KEY
	  •	VAPI_WORKFLOW_ID
	  •	BASE_URL (your public ngrok URL)

5. Start the FastAPI server
   uvicorn webhook_server:app --reload --port 8000

6. Expose via ngrok
   ngrok http 8000

7. Register webhooks
   HubSpot → point contact.creation webhook to: https://<your-ngrok-url>/webhook/hubspot
   VAPI → set webhook to: https://<your-ngrok-url>/webhook/vapi

===============================================================================================

##Example Workflows: Run these on the terminal to minimize API cost.

   # Notes
  - Example IDs (`eventId`, `portalId`, etc.) in the sample workflows are placeholders. Replace `<CONTACT_ID>` with a valid HubSpot contact ID when testing.  
  - Add you NGROK URL/ Secret keys accordingly

    #HubSpot → New Contact:
      curl -X POST "https://<ngrok-url>/webhook/hubspot" \
        -H "Content-Type: application/json" \
        -d '[{
          "eventId": 11111,
          "subscriptionId": 22222,
          "portalId": 3333333,
          "appId": 44444,
          "occurredAt": 1234567890000,
          "subscriptionType": "contact.creation",
          "attemptNumber": 0,
          "objectId": "<CONTACT_ID>",
          "changeFlag": "NEW",
          "changeSource": "INTEGRATION",
          "sourceId": "55555"
        }]'
    
    #VAPI → End of Call:
      curl -X POST "https://<ngrok-url>/webhook/vapi" \
        -H "Content-Type: application/json" \
        -d '{
          "message": {
            "type": "end-of-call-report",
            "timestamp": 999,
            "endedReason": "completed",
            "call": { "id": "sim-001", "metadata": { "lead_id": "<CONTACT_ID>", "name": "Test Lead" } },
            "artifact": { "transcript": "Prospect confirmed budget, authority, wants this week." },
            "analysis": {
              "summary": "Qualified: strong budget, decision maker, timeline within 7 days.",
              "structuredData": { "budget":"high", "need":"clear", "authority":true, "timing_days":7 }
            }
          }
        }'
